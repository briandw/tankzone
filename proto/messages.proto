syntax = "proto3";

package battletanks;

// Common types
message Vector3 {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Vector2 {
    float x = 1;
    float y = 2;
}

enum TeamColor {
    TEAM_NEUTRAL = 0;
    TEAM_RED = 1;
    TEAM_BLUE = 2;
    TEAM_NPC = 3;
}

enum PowerUpType {
    POWER_UP_NONE = 0;
    POWER_UP_SHIELD = 1;
    POWER_UP_CLOAK = 2;
    POWER_UP_SPEED = 3;
    POWER_UP_RAPID_FIRE = 4;
}

// Player input message (Client -> Server)
message PlayerInput {
    bool forward = 1;
    bool backward = 2;
    bool rotate_left = 3;
    bool rotate_right = 4;
    bool fire = 5;
    float turret_angle = 6;
    uint64 timestamp = 7;
    uint32 sequence_number = 8;
}

// Tank state for network updates
message TankState {
    uint32 entity_id = 1;
    string player_id = 2;
    string display_name = 3;
    Vector3 position = 4;
    float body_rotation = 5;
    float turret_rotation = 6;
    uint32 health = 7;
    uint32 max_health = 8;
    TeamColor team = 9;
    repeated ActivePowerUp active_powerups = 10;
    bool is_invulnerable = 11;
    float invulnerability_remaining = 12;
}

// Projectile state for network updates
message ProjectileState {
    uint32 entity_id = 1;
    string owner_id = 2;
    Vector3 position = 3;
    Vector3 velocity = 4;
    uint32 damage = 5;
    TeamColor team = 6;
    float lifetime_remaining = 7;
}

// Power-up state for network updates
message PowerUpState {
    uint32 entity_id = 1;
    PowerUpType power_up_type = 2;
    Vector3 position = 3;
    bool is_available = 4;
    float respawn_timer = 5;
}

// Active power-up on a tank
message ActivePowerUp {
    PowerUpType power_up_type = 1;
    float duration_remaining = 2;
    float total_duration = 3;
}

// Game events
message GameEvent {
    uint64 timestamp = 1;
    oneof event_type {
        PlayerJoinedEvent player_joined = 2;
        PlayerLeftEvent player_left = 3;
        TankDestroyedEvent tank_destroyed = 4;
        PowerUpPickedUpEvent power_up_picked_up = 5;
        ProjectileHitEvent projectile_hit = 6;
        ChatMessageEvent chat_message = 7;
        RoundStartedEvent round_started = 8;
        RoundEndedEvent round_ended = 9;
    }
}

message PlayerJoinedEvent {
    string player_id = 1;
    string display_name = 2;
    uint32 entity_id = 3;
}

message PlayerLeftEvent {
    string player_id = 1;
    string display_name = 2;
}

message TankDestroyedEvent {
    uint32 victim_entity_id = 1;
    string victim_player_id = 2;
    uint32 killer_entity_id = 3;
    string killer_player_id = 4;
    Vector3 explosion_position = 5;
}

message PowerUpPickedUpEvent {
    string player_id = 1;
    uint32 tank_entity_id = 2;
    PowerUpType power_up_type = 3;
    uint32 power_up_entity_id = 4;
}

message ProjectileHitEvent {
    uint32 projectile_entity_id = 1;
    uint32 target_entity_id = 2;
    Vector3 hit_position = 3;
    uint32 damage_dealt = 4;
}

message ChatMessageEvent {
    string player_id = 1;
    string display_name = 2;
    string message = 3;
    uint64 timestamp = 4;
}

message RoundStartedEvent {
    uint32 round_number = 1;
    float round_duration = 2;
}

message RoundEndedEvent {
    uint32 round_number = 1;
    repeated PlayerScore final_scores = 2;
    string winner_player_id = 3;
}

message PlayerScore {
    string player_id = 1;
    string display_name = 2;
    uint32 kills = 3;
    uint32 deaths = 4;
    uint32 score = 5;
}

// Main game state update message (Server -> Client)
message GameStateUpdate {
    uint64 tick = 1;
    float round_time_remaining = 2;
    repeated TankState tanks = 3;
    repeated ProjectileState projectiles = 4;
    repeated PowerUpState power_ups = 5;
    repeated GameEvent events = 6;
    repeated PlayerScore scores = 7;
    bool is_delta_update = 8;
    uint32 full_state_tick = 9;
}

// Client connection messages
message JoinGameRequest {
    string display_name = 1;
    string client_version = 2;
}

message JoinGameResponse {
    bool success = 1;
    string error_message = 2;
    string player_id = 3;
    uint32 assigned_entity_id = 4;
    GameConfig game_config = 5;
}

message GameConfig {
    float tick_rate = 1;
    uint32 max_players = 2;
    float round_duration = 3;
    float respawn_time = 4;
    float invulnerability_time = 5;
    Vector2 map_size = 6;
}

// Ping/Pong for latency measurement
message PingRequest {
    uint64 client_timestamp = 1;
    uint32 sequence_number = 2;
}

message PongResponse {
    uint64 client_timestamp = 1;
    uint64 server_timestamp = 2;
    uint32 sequence_number = 3;
}

// Main message wrapper for all client-server communication
message NetworkMessage {
    uint64 timestamp = 1;
    oneof message_type {
        // Client -> Server
        JoinGameRequest join_game_request = 2;
        PlayerInput player_input = 3;
        PingRequest ping_request = 4;
        
        // Server -> Client
        JoinGameResponse join_game_response = 5;
        GameStateUpdate game_state_update = 6;
        PongResponse pong_response = 7;
        
        // Bidirectional
        ChatMessageEvent chat_message = 8;
    }
} 